/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 17 09:21:30 GMT 2024
 */

package com.tts;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.tts.Inbox;
import com.tts.Mail;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Inbox_ESTest extends Inbox_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Inbox inbox0 = new Inbox();
      Mail mail0 = new Mail("Inbox:\n", "Inbox:\n", "Inbox:\n", "Inbox:\n");
      inbox0.addMail(mail0);
      List<Mail> list0 = inbox0.getAllMails();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Inbox inbox0 = new Inbox();
      inbox0.addMail((Mail) null);
      // Undeclared exception!
      try { 
        inbox0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.tts.Inbox", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Inbox inbox0 = new Inbox();
      inbox0.addMail((Mail) null);
      // Undeclared exception!
      try { 
        inbox0.markAllAsRead();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.tts.Inbox", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Inbox inbox0 = new Inbox();
      Mail mail0 = new Mail("Inbox:\n", "Inbox:\n", "Inbox:\n", "Inbox:\n");
      inbox0.addMail(mail0);
      String string0 = inbox0.toString();
      assertEquals("Inbox:\nMail from: Inbox:\n\nTo: Inbox:\n\nSubject: Inbox:\n\nRead: false\n\n", string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Inbox inbox0 = new Inbox();
      Mail mail0 = new Mail("Inbox:\n", "Inbox:\n", "Inbox:\n", "Inbox:\n");
      inbox0.addMail(mail0);
      inbox0.markAllAsRead();
      List<Mail> list0 = inbox0.getUnreadMails();
      assertFalse(list0.contains(mail0));
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Inbox inbox0 = new Inbox();
      Mail mail0 = new Mail("Mail from: ", "fF1x", "Inbox:\n", "fF1x");
      inbox0.addMail(mail0);
      List<Mail> list0 = inbox0.getUnreadMails();
      assertTrue(list0.contains(mail0));
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Inbox inbox0 = new Inbox();
      List<Mail> list0 = inbox0.getAllMails();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Inbox inbox0 = new Inbox();
      inbox0.addMail((Mail) null);
      // Undeclared exception!
      try { 
        inbox0.getUnreadMails();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.tts.Inbox", e);
      }
  }
}
